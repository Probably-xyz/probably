generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  founder       Founder[]
  investor      Investor[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Founder {
  id       String   @id @default(cuid())
  name     String?
  email    String?
  image    String?
  bio      String?
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  startups Startup?
}

model Investor {
  id     String  @id @default(cuid())
  name   String?
  email  String?
  image  String?
  bio    String?
  userId String
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Startup {
  id          String  @id @default(cuid())
  name        String
  logo        String
  tagline     String
  summary     String
  industry    String
  stage       String
  goal        String
  lookingFor  String
  pitch       String
  linkedin    String?
  website     String?
  otherSocial String?
  fileExtra   String?
  extraTwo    String?
  founderId   String
  createdBy   Founder @relation(fields: [id], references: [id], onDelete: Cascade)
}
