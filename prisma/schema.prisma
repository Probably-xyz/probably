generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  role          String?
  accounts      Account[]
  sessions      Session[]
  founder       Founder?
  investor      Investor?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Founder{
  id         String @id @default(cuid())
  name       String?
  email      String?
  number     String?
  status     String?
  title      String?
  shortDesc  String?
  summary    String?
  github     String?
  linkedin   String?
  twitter    String?
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String    @unique
  startups   Startup[]
}

model Investor{
  id        String  @id @default(cuid())
  name      String?
  email     String?
  number    String?
  status    String?
  type      String?
  firm      String?
  stage     String[]
  sectors   String[]
  regions   String[]
  portfolio String?
  website   String?
  twitter   String?
  linkedin  String?
  user   User   @relation(fields: [userId], references: [id])
  userId String    @unique
  liked  Startup[] @relation()
}


model Startup {
  id          String  @id @default(cuid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  name        String?
  logo        String?
  founded     DateTime?
  industry    String?
  tagline     String?
  desc        String?
  lookingFor  String?
  development String?
  region      String?
  stage       String?
  fundGoal    String?
  milestones  String?
  teamSize    String?
  teamDesc    String?
  website     String?
  linkedin    String?
  twitter     String?
  otherSocial String?
  pitch       String?
  video       String?
  founder     Founder       @relation(fields: [founderId], references: [id], onDelete: Cascade)
  founderId   String   
  likedBy     Investor[] @relation()
}
